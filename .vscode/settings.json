// {
//     "files.defaultLanguage": "cpp", // ctrl+N新建文件后默认的语言
//     "editor.formatOnType": true, // 输入时就进行格式化，默认触发字符较少，分号可以触发
//     "editor.snippetSuggestions": "top", // snippets代码优先显示补全
//     "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
//     "code-runner.executorMap": {
//         "c": "cd $dir && clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 && $dir$fileNameWithoutExt",
//         "cpp": "cd $dir && clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 && $dir$fileNameWithoutExt"
//     }, // 设置code runner的命令行
//     "code-runner.saveFileBeforeRun": true, // run code前保存
//     "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
//     "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息
//     "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序）
//     "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档
//     "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉
//     "C_Cpp.autocomplete": "Disabled", // 因为有clang的补全，所以关掉
//     "clang.cflags": [ // 控制c语言静态检测的参数
//         "--target=x86_64-w64-mingw",
//         "-std=c11",
//         "-Wall"
//     ],
//     "clang.cxxflags": [ // 控制c++静态检测时的参数
//         "--target=x86_64-w64-mingw",
//         "-std=c++17",
//         "-Wall"
//     ],
//     "clang.completion.enable":true // 效果效果比cpptools要好
// }
{
    "files.defaultLanguage": "cpp", // ctrl+N新建文件后默认的语言
    "editor.fontFamily": "Cascadia Code, 'Courier New', Microsoft Yahei, monospace",
    "editor.fontLigatures": true,
    "editor.formatOnType": true, // 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码
    "editor.suggest.snippetsPreventQuickSuggestions": false, // clangd的snippets有很多的跳转点，不用这个就必须手动触发Intellisense了
    "editor.acceptSuggestionOnEnter": "off", // 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense
    // "editor.snippetSuggestions": "top", // （可选）snippets显示在补全列表顶端，默认是inline
    "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入
    "code-runner.executorMap": {
        "c": "cd $dir && gcc '$fileName' -o '$fileNameWithoutExt.exe' -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK && &'$dir$fileNameWithoutExt'",
        "cpp": "cd $dir && g++ '$fileName' -o '$fileNameWithoutExt.exe' -Wall -g -O2 -static-libgcc -std=c++17 -fexec-charset=GBK && &'$dir$fileNameWithoutExt'"
        // "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -std=c11 -fexec-charset=GBK && $dir$fileNameWithoutExt",
        // "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -std=c++17 -fexec-charset=GBK && $dir$fileNameWithoutExt"
    }, // 右键run code时运行的命令；未注释的仅适用于PowerShell（Win10默认），文件名中有空格也可以编译运行；注释掉的适用于cmd（win7默认），PS和bash也能用，但文件名中有空格时无法运行
    "code-runner.saveFileBeforeRun": true, // run code前保存
    "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false
    "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息，默认false
    "code-runner.ignoreSelection": true, // 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用
    "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序）
    "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档
    "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉
    // "C_Cpp.autocomplete": "Disabled", // 因为有clang的补全，所以关掉
    "clang.cflags": [ // 控制c语言静态检测的参数
        "--target=x86_64-w64-mingw",
        "-std=c11",
        "-Wall"
    ],
    "clang.cxxflags": [ // 控制c++静态检测时的参数
        "--target=x86_64-w64-mingw",
        "-std=c++17",
        "-Wall"
    ],
    "clang.completion.enable": true,
    "editor.accessibilityPageSize": 16,
    "files.associations": {
        "cstdlib": "cpp",
        "iosfwd": "cpp"
    } // 效果效果比cpptools要好
}